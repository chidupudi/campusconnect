name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: campusconnect-cluster
  GKE_ZONE: asia-south1-a
  DEPLOYMENT_NAME: campusconnect
  IMAGE_FRONTEND: campusconnect-frontend
  IMAGE_BACKEND: campusconnect-backend
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          cc/package-lock.json

    - name: Install backend dependencies
      run: |
        cd server
        npm ci

    - name: Install frontend dependencies
      run: |
        cd cc
        npm ci

    - name: Run backend tests
      run: |
        cd server
        npm test || echo "No tests found"

    - name: Run frontend tests
      run: |
        cd cc
        npm test -- --coverage --watchAll=false

    - name: Lint backend code
      run: |
        cd server
        npm run lint || echo "No lint script found"

    - name: Lint frontend code
      run: |
        cd cc
        npm run lint || echo "No lint script found"

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./cc
        file: ./cc/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.1/kustomize_v5.0.1_linux_amd64.tar.gz
        tar -xzf kustomize*.tar.gz
        chmod +x ./kustomize

    - name: Deploy to GKE
      run: |-
        # Replace image names in deployment files
        cd k8s
        sed -i "s|IMAGE_BACKEND|$DOCKER_HUB_USERNAME/$IMAGE_BACKEND:main-$GITHUB_SHA|g" backend-deployment.yaml
        sed -i "s|IMAGE_FRONTEND|$DOCKER_HUB_USERNAME/$IMAGE_FRONTEND:main-$GITHUB_SHA|g" frontend-deployment.yaml

        # Apply all Kubernetes manifests
        kubectl apply -f namespace.yaml
        kubectl apply -f mongodb-secret.yaml
        kubectl apply -f mongodb-deployment.yaml
        kubectl apply -f mongodb-service.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f backend-service.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f frontend-service.yaml

        # Wait for rollout to complete
        kubectl rollout status deployment/backend-deployment -n campusconnect
        kubectl rollout status deployment/frontend-deployment -n campusconnect

        # Get the external IP
        kubectl get services frontend-service -n campusconnect