name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: campusconnect-project
  GKE_CLUSTER: campusconnect-cluster
  GKE_ZONE: asia-south1-a
  GAR_LOCATION: asia-south1
  GAR_REPOSITORY: campusconnect-repo
  IMAGE_FRONTEND: campusconnect-frontend
  IMAGE_BACKEND: campusconnect-backend

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Test Backend
      working-directory: ./server
      run: |
        npm ci
        npm test || echo "No tests configured"

    - name: Test Frontend
      working-directory: ./cc
      run: |
        npm ci
        npm test -- --coverage --watchAll=false || echo "Tests completed"

    - name: Google Auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Setup Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker for GAR
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and Push Backend Image
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }} ./server
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}

    - name: Build and Push Frontend Image
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }} ./cc
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

    - name: Get GKE Credentials
      if: github.ref == 'refs/heads/main'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Deploy to GKE
      if: github.ref == 'refs/heads/main'
      run: |
        cd k8s
        sed -i "s|IMAGE_BACKEND|${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_BACKEND }}:${{ github.sha }}|g" backend-deployment.yaml
        sed -i "s|IMAGE_FRONTEND|${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_FRONTEND }}:${{ github.sha }}|g" frontend-deployment.yaml
        
        kubectl apply -f namespace.yaml
        kubectl apply -f mongodb-secret.yaml
        kubectl apply -f mongodb-deployment.yaml
        kubectl apply -f backend-configmap.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f backend-service.yaml
        kubectl apply -f frontend-configmap.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f frontend-service.yaml

        kubectl rollout status deployment/backend-deployment -n campusconnect --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n campusconnect --timeout=300s

    - name: Health Check
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Waiting for LoadBalancer IP..."
        sleep 60
        EXTERNAL_IP=$(kubectl get service frontend-service -n campusconnect -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$EXTERNAL_IP" ]; then
          echo "Application deployed successfully!"
          echo "Frontend URL: http://$EXTERNAL_IP:3700"
          echo "Backend Health Check: http://$EXTERNAL_IP:3700/api/health"
          curl -f "http://$EXTERNAL_IP:3700/health" || echo "Health check pending..."
        else
          echo "External IP not yet assigned. Check LoadBalancer status."
        fi
